/** @file  rtex_football_deploy.ppl
 *  @brief Optimized Robotex football pipeline
 *
 *  @author Meelik Kiik
 *  @date 28. November 2016
 *  @version 0.1
 */

REQUIRED_FORMAT:outputFormat(inputFormat)
CALL:FORMAT_TO_CONSTANT(outputFormat)

INCLUDE(convolution.ppl)
INCLUDE(colors.ppl)

SOURCE:RtexShader
{
  #version 130
  uniform sampler2D texIn;
  uniform sampler2D dYUV; // 16:32:32 bit YUV mapper

  out vec4 texOut;

  const int WIDTH = 1280;
  const int HEIGHT = 1080;

  /* UNDISTORT CONSTANTS */
  const float fx = 410.87342685016085,
              u0 = 619.8153742855453,
              fy = 412.6381257340259,
              v0 = 523.8633110292322;

  const float k1 = -0.14170496298057786,
              k2 = 0.01639900857367671,
              p1 = -0.00020819713744603386,
              p2 = -0.0005379534222062247,
              k3 = -0.0008035865084859292;

  const mat3 camMx = mat3(fx,  0.0, 0.0,
                          0.0, fy,  0.0,
                          u0,  v0,  1.0);

  const float SCALE = 1.92;

  /* CLEARANCE CONSTANTS */
  const int CL_H = 450;
  const int CL_W = 500;

  const vec2 L_LIM_P1 = vec2(0 - 300, HEIGHT);
  const vec2 L_LIM_P2 = vec2(CL_W, HEIGHT - CL_H);

  const vec2 R_LIM_P1 = vec2(WIDTH - CL_W, HEIGHT - CL_H);
  const vec2 R_LIM_P2 = vec2(WIDTH + 300, HEIGHT);


  vec3 undistort(vec2 coord) {
    float x = coord.x / (WIDTH / 2.0) - 1.0, y = coord.y / (HEIGHT / 2.0) - 1.0; // 100, 100

    x *= SCALE;
    y *= SCALE;

    float x2 = x*x, y2 = y*y;
    float r2 = x2 + y2, _2xy = 2*x*y;

    float kr = (1 + ( (k3*r2 + k2)*r2 + k1 )*r2 );

    x = (x*kr + p1*_2xy + p2*(r2 + 2*x2));
    y = (y*kr + p1*(r2 + 2*y2) + p2*_2xy);

    //vec3 uvz = vec3(x * (fx + u0), y * (fy + v0), 1.0).rgb;
    return camMx * vec3(x, y, 1.0);
  }

  float side(vec2 O, vec2 p1, vec2 p2) {
    return (p2.x - p1.x) * (O.y - p1.y) - (p2.y - p1.y) * (O.x - p1.x);
  }

  void main()
  {
    if(gl_FragCoord.y > (HEIGHT - 450)) {
      if(side(gl_FragCoord.xy, R_LIM_P1, R_LIM_P2) > 0) {
        if(side(gl_FragCoord.xy, L_LIM_P1, L_LIM_P2) > 0) {
          texOut.rgb = vec3(0, 0, 0);
          return;
        }
      }
    }

    vec3 pos = undistort(gl_FragCoord.xy);

    vec3 rgb = texelFetch(texIn, ivec2(pos.xy), 0).rgb;

    int y = int(rgb.r * 15);
    int v = int(rgb.g * 31) * 32 + int(rgb.b * 31);

    vec3 srgb = texelFetch(dYUV, ivec2(v, y), 0).rgb;
    texOut.rgb = srgb;
  }


}

FILTER_LAYOUT:RtexFilter(outputFormat, RtexShader)

PIPELINE_MAIN:SimplifyPipe
{
  INPUT_PORTS(texIn, dYUV)
  OUTPUT_PORTS(texOut)

  FILTER_INSTANCE:RtexFilter

  CONNECTION(THIS, texIn, RtexFilter, texIn)
  CONNECTION(THIS, dYUV, RtexFilter, dYUV)

  CONNECTION(RtexFilter, texOut, THIS, texOut)
}
