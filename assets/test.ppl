/** @file test.ppl
 *
 *  @author Meelik Kiik
 *  @date 21. October 2016
 *  @version 0.1
 */

REQUIRED_FORMAT:outputFormat(inputFormat)
CALL:FORMAT_TO_CONSTANT(outputFormat)

INCLUDE(colors.ppl)
INCLUDE(convolution.ppl)

SOURCE:YUVToRGBShader
{
  #version 130
  uniform sampler2D texInput;
  out vec4 texRGB;

  #pragma INSERT(ColorPrimitives)
  #pragma INSERT(outputFormat)

  void main() {
    vec2 pos = gl_FragCoord.xy / vec2(outputFormat); // ;
    vec3 yuv = textureLod(texInput, pos, 0.0).rgb, rgb;

    YUVToRGB(yuv, rgb);

    //float g = dot(vec3(0.222, 0.707, 0.071), rgb);
    texRGB.rgb = rgb;
  }
}

SOURCE:FisheyeShader
{
  #version 130
  uniform sampler2D texInput;
  out vec4 texOutput;

  void main() {
    vec2 resolution = vec2(640, 480);
    vec2 p = gl_FragCoord.xy / resolution.xy;
    float prop = resolution.x / resolution.y;

    vec2 m = vec2(0.5, 0.5);

    vec2 d = p - m;

    float r = sqrt(dot(d, d));

    float power = ( 2.0 * 3.141592 / (2.0 * sqrt(dot(m, m))) ) * (0.444 - 0.5);

    float bind;
    if(power > 0.0) bind = sqrt(dot(m, m));
    else {
      if(prop < 1.0) bind = m.x;
      else bind = m.y;
    }

    vec2 uv;
    if (power > 0.0) //fisheye
      uv = m + normalize(d) * tan(r * power) * bind / tan( bind * power);
    else if (power < 0.0) //antifisheye
      uv = m + normalize(d) * atan(r * -power * 10.0) * bind / atan(-power * bind * 10.0);
    else uv = p;//no effect for power = 1.0

    vec3 rgb = textureLod(texInput, vec2(uv.x, uv.y), 0).rgb;
    texOutput.rgb = rgb;
  }
}



SOURCE:TestShader
{
  #version 130
  uniform sampler2D texInput;
  out vec4 texOutput;

  #pragma INSERT(convolutionSource)

  const mat3 kernelX = mat3(-1.0, 0.0, 1.0,
                            -2.0, 0.0, 2.0,
                            -1.0, 0.0, 1.0);
  const mat3 kernelY = mat3(-1.0, -2.0, -1.0,
                             0.0,  0.0,  0.0,
                             1.0,  2.0,  1.0);

  /*
 const mat3 kernelX = mat3(3.0, 10.0, 3.0,
                           0.0, 0.0, 0.0,
                           3.0, -10.0, -3.0);
 const mat3 kernelY = mat3(3.0, 0.0, -3.0,
                           10.0,  0.0,  -10.0,
                           3.0,  0.0,  -3.0);
*/

  const float normalization = 3.0;

  void main()
  {
    mat3 patch = readPatch(texInput, ivec2(gl_FragCoord.xy), vec4(1.0,1.0,1.0,0.0)/2.0);
    float gx = convolve(patch, kernelX)/normalization,
          gy = convolve(patch, kernelY)/normalization;

    float g = sqrt(gx*gx + gy*gy);

    vec3 rgb = texelFetch(texInput, ivec2(gl_FragCoord.xy), 0).rgb;
    texOutput.rgb = rgb; // vec3(g, g, g)
  }
}

FILTER_LAYOUT:YUVToRGBFilter(outputFormat, YUVToRGBShader)
FILTER_LAYOUT:FisheyeFilter(outputFormat, FisheyeShader)
FILTER_LAYOUT:TestFilter(outputFormat, TestShader)

PIPELINE_MAIN:TestPipeline
{
  INPUT_PORTS(texInput)
  OUTPUT_PORTS(texOutput)

  FILTER_INSTANCE:YUVToRGBFilter
  FILTER_INSTANCE:FisheyeFilter
  FILTER_INSTANCE:TestFilter

  CONNECTION(THIS, texInput, YUVToRGBFilter, texInput)
  CONNECTION(YUVToRGBFilter, texRGB, FisheyeFilter, texInput)
  CONNECTION(FisheyeFilter, texOutput, TestFilter, texInput)
  CONNECTION(TestFilter, texOutput, THIS, texOutput)
}
