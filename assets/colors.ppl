/*
  Standard Color Space Conversion Functions
*/

UNIQUE(COLORS_FUNCTIONS)

SOURCE:ColorPrimitivesPrototypes
{
  void RGBToHSV(in vec3 rgb, out vec3 hsv);
  void HSVToRGB(in vec3 hsv, out vec3 rgb);
  void YUVToRGB(in vec3 yuv, out vec3 rgb);
  void XYZToxyz(inout vec3 col);
  void XYZToLsUsVs(inout vec3 col);
  void XYZToLAB(inout vec3 col);
  void XYZToLsAsBs(inout vec3 col);
  void XYZToRGB(inout vec3 col);
  void XYZTosRGB(inout vec3 col);
  void XYZToYIQ(inout vec3 col);
  void XYZToYpUV(inout vec3 col);
  void XYZToAdobeRGB(inout vec3 col);
  void xyzToXYZ(inout vec3 col);
  void LsUsVsToXYZ(inout vec3 col);
  void LABToXYZ(inout vec3 col);
  void LsAsBsToXYZ(inout vec3 col);
  void RGBToXYZ(inout vec3 col);
  void sRGBToXYZ(inout vec3 col);
  void YIQToXYZ(inout vec3 col);
  void YpUVToXYZ(inout vec3 col);
  void AdobeRGBToXYZ(inout vec3 col);
}

/*
  Constants :
        const float XD65 = 95.02;
        const float YD65 = 100.00;
        const float ZD65 = 108.82;
        const float xD65 = 0.31271;
        const float yD65 = 0.32902;
        const float zD65 = 0.35827;
        const float UPD65 = 0.19783;
        const float VPD65 = 0.46833;
*/

SOURCE:ColorPrimitives
{
  void RGBToHSV(in vec3 rgb, out vec3 hsv)
  {
    float mn, mx, delta;

    mn = min( min(rgb.r, rgb.g), rgb.b );
    mx = max( max(rgb.r, rgb.g), rgb.b );
    hsv.z = mx;

    delta = mx - mn;

    if( mx != 0.0 ) // if!
    {
      hsv.y = delta / mx;

      if( rgb.r == mx )
        hsv.x = ( rgb.g - rgb.b ) / delta;
      else if( rgb.g == mx )
        hsv.x = 2 + ( rgb.b - rgb.r ) / delta;
      else
        hsv.x = 4 + ( rgb.r - rgb.g ) / delta;

      hsv.x = hsv.x * 60.0;

      if( hsv.x < 0 )
        hsv.x = hsv.x + 360.0;
    }
    else
    {
      hsv.y = 0;
      hsv.x = -1;
    }
  }

  void HSVToRGB(in vec3 hsv, out vec3 rgb)
  {
    int i;
    float f, p, q, t;

    if( hsv.y == 0 )
      rgb = hsv.zzz;
    else
    {
      hsv.x = hsv.x / 60;
      i = int( floor( hsv.x ) );
      f = hsv.x - i;
      p = hsv.z * ( 1 - hsv.y );
      q = hsv.z * ( 1 - hsv.y * f );
      t = hsv.z * ( 1 - hsv.y * ( 1 - f ) );

      if( i==0 )
        rgb = vec3(hsv.z, t, p);
      else if( i==1 )
        rgb = vec3(q, hsv.z, p);
      else if( i==2 )
        rgb = vec3(p, hsv.z, t);
      else if( i==3 )
        rgb = vec3(p, q, hsv.z);
      else if( i==4 )
        rgb = vec3(t, p, hsv.z);
      else
        rgb = vec3(hsv.z, p, q);
    }
  }

  void YUVToRGB(in vec3 yuv, out vec3 rgb)
  {
    float y, u, v, r, g, b;

    y = yuv.r;
    u = yuv.g - 0.5;
    v = yuv.b - 0.5;

    r = clamp(y + 1.402 * v, 0.0, 1.0);
    g = clamp(y - 0.344 * u - 0.714 * v, 0.0, 1.0);
    b = clamp(y + 1.772 * u, 0.0, 1.0);

    rgb = vec3(r, g, b);
  }

  // Tools :
    float fLsAsBs(float x)
    {
      if( x>0.008856481679 )
        return pow(x,1.0/3.0);
      else
        return 841.0/108.0*x+4.0/29.0;
    }

    float gLsAsBs(float x)
    {
      if( x>0.008856481679 )
        return pow(x,3.0);
      else
        return 108.0/841.0*(x-4.0/29.0);
    }

    float fSRGB(float x)
    {
      if( x<= 0.0031308 )
        return 12.92*x;
      else
        return 1.055*pow(x,1.0/2.4) - 0.055;
    }

    float gSRGB(float x)
    {
      if( x<= 0.04045 )
        return x/12.92;
      else
        return pow((x+0.055)/(1.055), 2.4);
    }

  // From XYZ to ...
  void XYZToxyz(inout vec3 col)
  {
    float s = col.x + col.y + col.z;

    if(s!=0.0)
      col = col / s;
    else
      col = vec3(0.0, 0.0, 0.0);
  }

  void XYZToLsUsVs(inout vec3 col)
  {
    const float YD65 = 100.00;
    const float UPD65 = 0.19783;
    const float VPD65 = 0.46833;
    vec3 orig = col;

    // Ls
    if(orig.y/YD65 < 0.008856)
      col.x = 903.3 * orig.y/YD65;
    else
      col.x = 116.0 * pow(orig.y/YD65,1.0/3.0) - 16.0;

    // Us
    col.y = 13.0 * col.x * ( 4.0*orig.x/(orig.x+15.0*orig.y+3.0*orig.z) - UPD65);
    // Vs
    col.z = 13.0 * col.x * ( 9.0*orig.y/(orig.x+15.0*orig.y+3.0*orig.z) - VPD65);
  }

  void XYZToLAB(inout vec3 col)
  {
    const float XD65 = 95.02;
    const float YD65 = 100.00;
    const float ZD65 = 108.82;

    vec3 orig = col;

    col.x = 100.0*sqrt(orig.y/YD65);
    col.y = 172.30*(orig.x/XD65-orig.y/YD65)/sqrt(orig.y/YD65);
    col.z = 67.20*(orig.y/YD65-orig.z/ZD65)/sqrt(orig.y/YD65);
  }

  void XYZToLsAsBs(inout vec3 col)
  {
    const float XD65 = 95.02;
    const float YD65 = 100.00;
    const float ZD65 = 108.82;

    vec3 orig = col;

    col.x = 116.0*fLsAsBs(orig.y/YD65) - 16.0;
    col.y = 500.0*(fLsAsBs(orig.x/XD65)-fLsAsBs(orig.y/YD65));
    col.z = 200.0*(fLsAsBs(orig.y/YD65)-fLsAsBs(orig.z/ZD65));
  }

  void XYZToRGB(inout vec3 col)
  {
    const float YD65 = 100.00;
    col = col / YD65;

    const mat3 T = mat3(   0.41846, -0.09117,  0.00092,
          -0.15860,  0.25243, -0.00255,
          -0.08283,  0.01571,  0.17860);

    col = T * col;
  }

  void XYZTosRGB(inout vec3 col)
  {
    const float YD65 = 100.00;
    col = col / YD65;

    const mat3 T = mat3(   3.2406, -0.9689,  0.0557,
          -1.5372,  1.8758, -0.2040,
          -0.4986,  0.0415,  1.0570);

    col = T * col;

    col.r = fSRGB(col.r);
    col.g = fSRGB(col.g);
    col.b = fSRGB(col.b);
  }

  void XYZToYIQ(inout vec3 col)
  {
    const float YD65 = 100.00;
    col = col / YD65;

    const mat3 T = mat3(  0.0131,  0.1264,  0.0365,
          0.3325, -0.1310, -0.0921,
          0.0729, -0.0866,  0.0565);

    col = T * col;
  }

  void XYZToYpUV(inout vec3 col)
  {
    const float YD65 = 100.00;
    col = col / YD65;

    const mat3 T = mat3(  0.0975, -0.0547,  0.1105,
          0.3341, -0.1345, -0.0907,
          0.1251, -0.1220, -0.0166);

    col = T * col;
  }

  void XYZToAdobeRGB(inout vec3 col)
  {
    const float YD65 = 100.00;
    col = col / YD65;

    const mat3 T = mat3(     2.04159, -0.96924,  0.01344,
          -0.56501,  1.87597, -0.11836,
          -0.34473,  0.04156,  1.01517);

    col = T * col;

    col = pow(col, vec3(1.0,1.0,1.0)/2.2);
  }

  // From ... to XYZ
  void xyzToXYZ(inout vec3 col)
  {
    const float YD65 = 100.00;
    float  a = max(col.x, max(col.y, col.z)); // Normalization to the max

    if(a!=0.0)
      col = col / a;
    else
      col = vec3(0.0, 0.0, 0.0);

    col = col * YD65;
  }

  void LsUsVsToXYZ(inout vec3 col)
  {
    const float YD65 = 100.00;
    const float UPD65 = 0.19783;
    const float VPD65 = 0.46833;
    vec3 orig = col;

    // Y
    if(orig.x <= 8.0)
      col.y = YD65 * orig.x  * 9.0 / 841.0;
    else
      col.y = YD65 * pow((orig.x+16.0)/116.0,3.0);

    float up = orig.y/(13.0*orig.x) + UPD65;
    float vp = orig.z/(13.0*orig.x) + VPD65;

    // X
    col.x = col.y * (9.0*up)/(4.0*vp);
    // Z
    col.z = col.y * (12.0-3.0*up-20.0*vp)/(4.0*vp);
  }

  void LABToXYZ(inout vec3 col)
  {
    const float YD65 = 100.00;
    vec3 orig = col;

    col.y = pow(col.x/100.0, 2.0)*YD65;
    col.x = col.y/YD65 + orig.y/172.30*sqrt(col.y/YD65);
    col.z = col.y/YD65 - orig.z/67.20*sqrt(col.y/YD65);
  }

  void LsAsBsToXYZ(inout vec3 col)
  {
    const float XD65 = 95.02;
    const float YD65 = 100.00;
    const float ZD65 = 108.82;

    vec3 orig = col;

    col.x = XD65 * gLsAsBs((orig.x+16.0)/116.0);
    col.y = YD65 * gLsAsBs((orig.x+16.0)/116.0 + orig.y/500.0);
    col.z = ZD65 * gLsAsBs((orig.x+16.0)/116.0 - orig.z/200.0);
  }

  void RGBToXYZ(inout vec3 col)
  {
    const float YD65 = 100.00;

    const mat3 T = mat3(  2.76888, 1.0,     0.0,
          1.75175, 4.59070, 0.05651,
          1.13016, 0.06010, 5.59427);

    col = T * col;

    col = col * YD65;
  }

  void sRGBToXYZ(inout vec3 col)
  {
    const float YD65 = 100.00;

    col.r = gSRGB(col.r);
    col.g = gSRGB(col.g);
    col.b = gSRGB(col.b);

    const mat3 T = mat3(  0.4124,  0.2126,  0.0193,
          0.3576,  0.7152,  0.1192,
          0.1805,  0.0722,  0.9505);

    col = T * col;
    col = col * YD65;
  }

  void YIQToXYZ(inout vec3 col)
  {
    const float YD65 = 100.00;

    const mat3 T = mat3(  3.7250,  2.4966,  1.6618,
          6.1758,  0.4652, -3.2343,
          4.6615, -2.5078, 10.5995);

    col = T * col;
    col = col * YD65;
  }

  void YpUVToXYZ(inout vec3 col)
  {
    const float YD65 = 100.00;

    const mat3 T = mat3(  2.7687,  2.3741,  4.8008,
          1.8154, -0.0934, 11.0791,
          7.5062, -2.1416,  1.2519);

    col = T * col;
    col = col * YD65;
  }

  void AdobeRGBToXYZ(inout vec3 col)
  {
    const float YD65 = 100.00;

    col = pow(col, vec3(1.0,1.0,1.0)*2.2);

    const mat3 T = mat3(  0.57667,  0.29734,  0.02703,
          0.18556,  0.62736,  0.07069,
          0.18823,  0.07529,  0.99134);

    col = T * col;
    col = col * YD65;
  }
}
